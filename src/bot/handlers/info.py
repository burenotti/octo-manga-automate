import itertools

from utils import get_stars_score
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from yarl import URL

from loader import dispatcher, bot, driver
from bot.keyboards import manga_info as keyboard


@dispatcher.message_handler(Command("info"))
async def get_manga_info(message: Message):

    urls = list(filter(lambda e: e.type in ("url", "text_link"), message.entities))
    if len(urls) == 0:

        await message.answer("–¢–∞–∫ –Ω–µ–ª—å–∑—è! –ü–æ—Å–ª–µ <b>/info</b> –≤–≤–æ–¥–∏ —Å—Å—ã–ª–∫—É!")

    elif len(urls) > 1:

        await message.answer("–¢–∞–∫ –Ω–µ–ª—å–∑—è! –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É!")

    else:

        if urls[0].type == "url":

            url = URL(message.text[urls[0].offset: urls[0].offset + urls[0].length])

        else:

            url = URL(urls[0].url)

        if not driver.is_host_available(url.host):

            resource_list_str = '\n'.join(
                itertools.starmap("{}. {}".format, enumerate(driver.available_hosts, 1))
            )

            return await message.answer(
                "–ò–∑–≤–∏–Ω–∏, —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏:\n" + resource_list_str
            )

        try:

            manga_info = await driver.get_manga_info(url)

        except Exception as e:

            return await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üò± –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è, "
                                        "—Ç–æ —Å–∫–æ—Ä–æ –≤—Å—ë –¥–æ–ª–∂–Ω–æ –Ω–∞–ª–∞–¥–∏—Ç—å—Å—è, –æ–±–µ—â–∞–µ–º! üòâ")

        score = float(manga_info.score)
        text = (f"<b>{manga_info.name}</b>\n"
                f"\n{get_stars_score(score)}\n\n" +
                (f"<b>–ê–≤—Ç–æ—Ä: </b> {manga_info.author}\n\n" if manga_info.author else "") +
                f"{manga_info.description}")

        if manga_info.thumbnail_urls:
            media = list(map(InputMediaPhoto, manga_info.thumbnail_urls))
            await message.answer_media_group(media)

        markup = await keyboard.get_info_keyboard(manga_info)
        await message.answer(text, reply_markup=markup)
